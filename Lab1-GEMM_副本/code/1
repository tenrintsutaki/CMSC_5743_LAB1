#include <vector>
#include <iostream>

void im2col(const float* input, int batch_size, int height, int width, int channels,
            int kernel_size, int stride, int padding,
            std::vector<float>& output)
{
    int out_height = (height + 2 * padding - kernel_size) / stride + 1; // out h
    int out_width = (width + 2 * padding - kernel_size) / stride + 1; // out w

    int channel_size = height * width; // points per channel
    int output_col_size = channels * kernel_size * kernel_size;
    output.resize(batch_size * out_height * out_width * output_col_size);

    int output_index = 0;
    int input_index = 0;

    for (int n = 0; n < batch_size; ++n) // Loop over batch size
    {
        for (int c = 0; c < channels; ++c)
        {
            for (int h = 0; h < out_height; ++h)
            {
                for (int w = 0; w < out_width; ++w)
                {
                    for (int kh = 0; kh < kernel_size; ++kh)
                    {
                        for (int kw = 0; kw < kernel_size; ++kw)
                        {
                            int h_in = h * stride + kh - padding; // h index traced from original 2D Feature Map
                            int w_in = w * stride + kw - padding; // w index traced from original 2D Feature Map

                            input_index = n * channels * channel_size + c * channel_size + h_in * width + w_in; // Calculate input index

                            int current_channel_start = (c * kernel_size * kernel_size);
                            int row_start = (h * out_width + w) * output_col_size;
                            int kernel_start = (kh * kernel_size + kw);
                            output_index = n * out_height * out_width * output_col_size + row_start + kernel_start + current_channel_start;

                            if (h_in >= 0 && h_in < height && w_in >= 0 && w_in < width)
                            {
                                output[output_index] = input[input_index];
                            }
                            else
                            {
                                output[output_index] = 0; // If out of bounds, set to 0
                            }
                        }
                    }
                }
            }
        }
    }
}

int main() {
    // 示例数据
    int batch_size = 2;
    int height = 5;
    int width = 5;
    int channels = 3;
    int kernel_size = 3;
    int stride = 1;
    int padding = 1;

    // 创建输入数据
    std::vector<float> input(batch_size * channels * height * width);
    for (int i = 0; i < input.size(); ++i) {
        input[i] = static_cast<float>(i + 1); // 填充示例数据
    }

    // 输出数据
    std::vector<float> output;
    im2col(input.data(), batch_size, height, width, channels, kernel_size, stride, padding, output);

    // 打印输出结果
    int out_height = (height + 2 * padding - kernel_size) / stride + 1;
    int out_width = (width + 2 * padding - kernel_size) / stride + 1;
    int output_col_size = channels * kernel_size * kernel_size;

    for (int n = 0; n < batch_size; ++n) {
        std::cout << "Batch " << n << ":\n";
        for (int h = 0; h < out_height; ++h) {
            for (int w = 0; w < out_width; ++w) {
                for (int kh = 0; kh < kernel_size; ++kh) {
                    for (int kw = 0; kw < kernel_size; ++kw) {
                        int index = n * out_height * out_width * output_col_size + (h * out_width + w) * output_col_size + (kh * kernel_size + kw);
                        std::cout << output[index] << " ";
                    }
                    std::cout << "\t";
                }
                std::cout << "\n";
            }
            std::cout << "-----\n";
        }
    }

    return 0;
}